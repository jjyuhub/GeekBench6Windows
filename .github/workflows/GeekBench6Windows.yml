name: Geekbench 6 Benchmark Test

on:
  workflow_dispatch:  # Allows manual triggering
  schedule:
    - cron: '0 0 * * 0'  # Runs weekly on Sunday at midnight UTC

jobs:
  benchmark:
    name: Run Geekbench 6 on Windows
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Environment information
        run: |
          Write-Host "======== Environment Information ========"
          Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
          Write-Host "Windows Version: $(cmd /c ver)"
          Write-Host "Current Directory: $(Get-Location)"
          Write-Host "Current User: $(whoami)"
          Write-Host "Available disk space:"
          Get-PSDrive -PSProvider FileSystem | Format-Table -Property Name, Used, Free
          Write-Host "========================================"
        shell: pwsh
      
      - name: Create results directory
        run: |
          Write-Host "Creating results directory..."
          $resultsDir = "$(Get-Location)\results"
          
          if (Test-Path $resultsDir) {
            Write-Host "Results directory already exists at: $resultsDir"
          } else {
            New-Item -Path $resultsDir -ItemType Directory -Force
            Write-Host "Results directory created at: $resultsDir"
          }
          
          # Verify directory exists
          if (Test-Path $resultsDir) {
            Write-Host "✓ Results directory confirmed at: $resultsDir"
          } else {
            Write-Error "❌ Failed to create results directory!"
            exit 1
          }
        shell: pwsh
      
      - name: Download Geekbench 6
        run: |
          Write-Host "Downloading Geekbench 6..."
          $downloadUrl = "https://cdn.geekbench.com/Geekbench-6.2.1-WindowsSetup.exe"
          $setupFile = "$(Get-Location)\gb6_setup.exe"
          
          Write-Host "Download URL: $downloadUrl"
          Write-Host "Target file: $setupFile"
          
          try {
            Invoke-WebRequest -Uri $downloadUrl -OutFile $setupFile -UseBasicParsing -Verbose
            Write-Host "Download completed successfully."
          } catch {
            Write-Error "❌ Failed to download Geekbench 6: $_"
            exit 1
          }
          
          # Verify download
          if (Test-Path $setupFile) {
            $fileSize = (Get-Item $setupFile).Length / 1MB
            Write-Host "✓ Downloaded file verified. Size: $([math]::Round($fileSize, 2)) MB"
          } else {
            Write-Error "❌ Download verification failed - setup file not found!"
            exit 1
          }
        shell: pwsh
      
      - name: Install Geekbench 6
        run: |
          Write-Host "Installing Geekbench 6..."
          $setupFile = "$(Get-Location)\gb6_setup.exe"
          
          # Verify installer exists
          if (-Not (Test-Path $setupFile)) {
            Write-Error "❌ Geekbench 6 installer not found at: $setupFile"
            exit 1
          }
          
          Write-Host "Running installer silently with /S flag..."
          try {
            $process = Start-Process -FilePath $setupFile -ArgumentList "/S" -Wait -PassThru -Verbose
            Write-Host "Installation process completed with exit code: $($process.ExitCode)"
          } catch {
            Write-Error "❌ Installation failed: $_"
            exit 1
          }
          
          # Check common installation paths
          $possiblePaths = @(
            "C:\Program Files\Geekbench 6\geekbench6.exe",
            "C:\Program Files (x86)\Geekbench 6\geekbench6.exe",
            "${env:ProgramFiles}\Geekbench 6\geekbench6.exe",
            "${env:ProgramFiles(x86)}\Geekbench 6\geekbench6.exe",
            "${env:LOCALAPPDATA}\Programs\Geekbench 6\geekbench6.exe"
          )
          
          Write-Host "Checking for Geekbench 6 executable in possible installation paths..."
          $foundPaths = @()
          
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              Write-Host "✓ Found at: $path"
              $foundPaths += $path
            } else {
              Write-Host "✗ Not found at: $path"
            }
          }
          
          # Search for Geekbench in Program Files if not found
          if ($foundPaths.Count -eq 0) {
            Write-Host "Searching for Geekbench 6 in Program Files directories..."
            $searchDirs = @(
              "C:\Program Files",
              "C:\Program Files (x86)"
            )
            
            foreach ($dir in $searchDirs) {
              if (Test-Path $dir) {
                Write-Host "Searching in $dir..."
                $found = Get-ChildItem -Path $dir -Recurse -Filter "geekbench*.exe" -ErrorAction SilentlyContinue | Select-Object -First 5
                foreach ($item in $found) {
                  Write-Host "Found: $($item.FullName)"
                  $foundPaths += $item.FullName
                }
              }
            }
          }
          
          # Set the installation state for next steps
          if ($foundPaths.Count -gt 0) {
            Write-Host "✓ Geekbench executable found in $($foundPaths.Count) location(s)"
            $foundPaths | ForEach-Object { Write-Host "  - $_" }
            
            # Create a file with the found path to use in next step
            $foundPaths[0] | Out-File -FilePath ".\geekbench_path.txt"
            Write-Host "✓ Installation verified."
          } else {
            Write-Error "❌ Geekbench executable not found in any expected location after installation!"
            
            # List all installed programs for debugging
            Write-Host "Listing all installed programs for debugging..."
            Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | 
              Where-Object { $_.DisplayName -like "*Geekbench*" } | 
              Select-Object DisplayName, DisplayVersion, InstallLocation, InstallDate |
              Format-Table -AutoSize
              
            exit 1
          }
        shell: pwsh
      
      - name: Run Geekbench 6 benchmark
        run: |
          Write-Host "Running Geekbench 6 benchmark..."
          
          # Read Geekbench path from file created in previous step
          if (Test-Path ".\geekbench_path.txt") {
            $GB_PATH = Get-Content ".\geekbench_path.txt" -Raw
            $GB_PATH = $GB_PATH.Trim()
            Write-Host "Using Geekbench path from file: $GB_PATH"
          } else {
            # Default paths if file not found
            $possiblePaths = @(
              "C:\Program Files\Geekbench 6\geekbench6.exe",
              "C:\Program Files (x86)\Geekbench 6\geekbench6.exe",
              "${env:ProgramFiles}\Geekbench 6\geekbench6.exe",
              "${env:ProgramFiles(x86)}\Geekbench 6\geekbench6.exe",
              "${env:LOCALAPPDATA}\Programs\Geekbench 6\geekbench6.exe"
            )
            
            $GB_PATH = $null
            foreach ($path in $possiblePaths) {
              if (Test-Path $path) {
                $GB_PATH = $path
                Write-Host "Found Geekbench at: $GB_PATH"
                break
              }
            }
            
            if (-Not $GB_PATH) {
              Write-Error "❌ Geekbench 6 executable not found at any expected location"
              exit 1
            }
          }
          
          # Create results directory if it doesn't exist
          $resultsDir = "$(Get-Location)\results"
          if (-Not (Test-Path $resultsDir)) {
            New-Item -Path $resultsDir -ItemType Directory -Force
            Write-Host "Created results directory: $resultsDir"
          }
          
          $resultsFile = "$resultsDir\geekbench_results.txt"
          
          # Verify Geekbench executable exists
          if (-Not (Test-Path $GB_PATH)) {
            Write-Error "❌ Geekbench 6 executable not found at: $GB_PATH"
            exit 1
          }
          
          # Get Geekbench file information
          $fileInfo = Get-Item $GB_PATH
          Write-Host "Geekbench file details:"
          Write-Host "  - Path: $($fileInfo.FullName)"
          Write-Host "  - Size: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"
          Write-Host "  - Created: $($fileInfo.CreationTime)"
          Write-Host "  - Directory contents:"
          Get-ChildItem -Path $fileInfo.Directory | Format-Table Name, Length, LastWriteTime
          
          # Run benchmark with basic options (free version)
          # Note: Free version doesn't support --no-upload flag
          Write-Host "Starting benchmark with command: $GB_PATH --cpu"
          try {
            # Create a custom log file
            $logFile = "$resultsDir\benchmark_log.txt"
            
            # Run benchmark without --no-upload flag (free version)
            $benchmarkProcess = Start-Process -FilePath $GB_PATH -ArgumentList "--cpu" -Wait -PassThru -NoNewWindow -RedirectStandardOutput $logFile
            $exitCode = $benchmarkProcess.ExitCode
            Write-Host "Benchmark process completed with exit code: $exitCode"
            
            # Get the log contents
            if (Test-Path $logFile) {
              Write-Host "Benchmark log:"
              Get-Content $logFile | ForEach-Object { Write-Host "  $_" }
            }
            
            # Capture system information manually
            Write-Host "Capturing system information..."
            $sysInfoFile = "$resultsDir\system_info.txt"
            
            # CPU Information
            $cpuInfo = Get-WmiObject -Class Win32_Processor
            "CPU Information:" | Out-File -FilePath $sysInfoFile
            "Model: $($cpuInfo.Name)" | Out-File -FilePath $sysInfoFile -Append
            "Cores: $($cpuInfo.NumberOfCores)" | Out-File -FilePath $sysInfoFile -Append
            "Logical Processors: $($cpuInfo.NumberOfLogicalProcessors)" | Out-File -FilePath $sysInfoFile -Append
            "Max Clock Speed: $($cpuInfo.MaxClockSpeed) MHz" | Out-File -FilePath $sysInfoFile -Append
            
            # RAM Information
            $ramInfo = Get-WmiObject -Class Win32_ComputerSystem
            $ramSizeGB = [math]::Round($ramInfo.TotalPhysicalMemory / 1GB, 2)
            "`nRAM Information:" | Out-File -FilePath $sysInfoFile -Append
            "Total RAM: $ramSizeGB GB" | Out-File -FilePath $sysInfoFile -Append
            
            # GPU Information (if available)
            $gpuInfo = Get-WmiObject -Class Win32_VideoController
            "`nGPU Information:" | Out-File -FilePath $sysInfoFile -Append
            foreach ($gpu in $gpuInfo) {
              "GPU Name: $($gpu.Name)" | Out-File -FilePath $sysInfoFile -Append
              "Driver Version: $($gpu.DriverVersion)" | Out-File -FilePath $sysInfoFile -Append
              "Video RAM: $([math]::Round($gpu.AdapterRAM / 1MB, 2)) MB" | Out-File -FilePath $sysInfoFile -Append
            }
            
            # OS Information
            $osInfo = Get-WmiObject -Class Win32_OperatingSystem
            "`nOS Information:" | Out-File -FilePath $sysInfoFile -Append
            "OS Name: $($osInfo.Caption)" | Out-File -FilePath $sysInfoFile -Append
            "OS Version: $($osInfo.Version)" | Out-File -FilePath $sysInfoFile -Append
            "OS Architecture: $($osInfo.OSArchitecture)" | Out-File -FilePath $sysInfoFile -Append
            
            # Disk Information
            $diskInfo = Get-WmiObject -Class Win32_LogicalDisk -Filter "DriveType=3"
            "`nDisk Information:" | Out-File -FilePath $sysInfoFile -Append
            foreach ($disk in $diskInfo) {
              $sizeGB = [math]::Round($disk.Size / 1GB, 2)
              $freeGB = [math]::Round($disk.FreeSpace / 1GB, 2)
              "Drive $($disk.DeviceID): Total $sizeGB GB, Free $freeGB GB" | Out-File -FilePath $sysInfoFile -Append
            }
            
            # Verify system info file
            if (Test-Path $sysInfoFile) {
              Write-Host "System information captured successfully"
              Write-Host "System info summary:"
              Get-Content $sysInfoFile | ForEach-Object { Write-Host "  $_" }
            } else {
              Write-Host "Failed to create system information file"
            }
            
            # Create a results file if it doesn't exist
            if (-Not (Test-Path $resultsFile)) {
              "Geekbench 6 Benchmark Results" | Out-File -FilePath $resultsFile
              "Run Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" | Out-File -FilePath $resultsFile -Append
              "Note: This run used Geekbench 6 free version which doesn't support --no-upload flag." | Out-File -FilePath $resultsFile -Append
              "Please check Geekbench Browser for full results." | Out-File -FilePath $resultsFile -Append
            }
            
            # Consider benchmark successful if exitcode is 0
            if ($exitCode -eq 0) {
              Write-Host "✓ Benchmark completed successfully"
            } else {
              Write-Host "⚠️ Benchmark completed with non-zero exit code: $exitCode"
            }
          } catch {
            Write-Error "❌ Failed to run benchmark: $_"
            exit 1
          }
          
          # Ensure we have files to upload as artifacts
          $anyFilesCreated = (Test-Path $logFile) -or (Test-Path $sysInfoFile) -or (Test-Path $resultsFile)
          if (-Not $anyFilesCreated) {
            # Create a basic results file if nothing else was created
            "Geekbench 6 Benchmark Run" | Out-File -FilePath $resultsFile
            "Run Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" | Out-File -FilePath $resultsFile -Append
            "Benchmark attempted but no detailed results were captured." | Out-File -FilePath $resultsFile -Append
          }
        shell: pwsh
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: geekbench-results
          path: results/
          retention-days: 90
        if: always()  # Try to upload even if previous steps failed
